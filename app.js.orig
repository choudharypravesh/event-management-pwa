'use strict';
var express = require('express');
var path = require('path');
var favicon = require('serve-favicon');
var logger = require('morgan');
var cookieParser = require('cookie-parser');
var bodyParser = require('body-parser');
var passport = require('passport');
var GoogleStrategy = require('passport-google-oauth20').Strategy;
var defaultLogger = require('./logger');
var expireHandler = require('./expireHandler');
var session = require('express-session');
var User = require('./schema').Users;
var googleClientInfo = require('./googleClient.json');
var api = require('./api/index');
process.env.constPath = __dirname;
var app = express();
// view engine setup
app.set('views', path.join(__dirname, 'public/views/'));
app.set('view engine', 'ejs');
// uncomment after placing your favicon in /public
//app.use(favicon(path.join(__dirname, 'public', 'favicon.ico')));
app.use(logger('dev'));
app.use(bodyParser.json());
app.use(bodyParser.urlencoded({
    extended: false
}));
app.use(cookieParser());
app.use(express.static(path.join(__dirname, 'public')));
app.use(session({
    secret: 'anything'
}));
app.use(passport.initialize());
app.use(passport.session());
app.use('/api', api);
app.get('/auth/google', passport.authenticate('google', {
    scope: ['profile']
}));
app.get('/auth/google/callback', passport.authenticate('google', {
    failureRedirect: '/sign-in'
}), function(req, res) {
    // Successful authentication, redirect home.
    res.redirect('/');
});
app.use('/', function(req, res, next) {
    res.render('index', {
        title: 'Skippr'
    });
});
passport.serializeUser(function(user, done) {
    done(null, user.googleId);
});
passport.deserializeUser(function(user, done) {
    User.findOne({
        googleId: user
    }, {
        __v: 0,
        createDate: 0
    }, done);
});
passport.use(new GoogleStrategy({
        clientID: googleClientInfo.web.client_id,
        clientSecret: googleClientInfo.web.client_secret,
        callbackURL: "http://www.skippr.co/auth/google/callback"
    },
    function(accessToken, refreshToken, profile, cb) {
        //defaultLogger.info(profile);
        User.findOne({
            googleId: profile.id
        }, {
            __v: 0,
            createDate: 0
        }, function(err, user) {
            if (user) {
                return cb(err, user);
            } else {
                var users = new User({
                    googleId: profile.id,
                    name: profile.displayName,
                    email: profile.email,
                    isPremium: false,
                    createDate: new Date(),
                    googleProfileImg: profile.image.url
                });
                users.save(cb);
            }
        });
    }
));
// catch 404 and forward to error handler
app.use(function(req, res, next) {
    var err = new Error('Not Found');
    err.status = 404;
    next(err);
});
// error handler
app.use(function(err, req, res, next) {
    // set locals, only providing error in development
    res.locals.message = err.message;
    res.locals.error = req.app.get('env') === 'development' ? err : {};
    defaultLogger.error('application error', err);
    // render the error page
    res.status(err.status || 500);
    res.send({
        status: false,
        message: 'invalid request'
    });
});
app.listen(8082);
console.log("8082 is the magic port");
function checkExpires() {
    setTimeout(function() {
        process.nextTick(function() {
            expireHandler(function() {
                checkExpires();
            });
        });
    }, 60000);
}
checkExpires();
app.listen(8082);
module.exports = app;
